# This file is automatically generated by lib/gen_snippet.rb

# Resource snippets

snippet bridge
options head
  describe bridge('${1:#:NAME}') do
    ${0}
  end

snippet bond
options head
  describe bond('${1:#:NAME}') do
    ${0}
  end

snippet cgroup
options head
  describe cgroup('${1:#:NAME}') do
    ${0}
  end

snippet command
options head
  describe command('${1:#:NAME}') do
    ${0}
  end

snippet cron
options head
  describe cron('${1:#:NAME}') do
    ${0}
  end

snippet default_gateway
options head
  describe default_gateway('${1:#:NAME}') do
    ${0}
  end

snippet file
options head
  describe file('${1:#:NAME}') do
    ${0}
  end

snippet fstab
options head
  describe fstab('${1:#:NAME}') do
    ${0}
  end

snippet group
options head
  describe group('${1:#:NAME}') do
    ${0}
  end

snippet host
options head
  describe host('${1:#:NAME}') do
    ${0}
  end

snippet iis_website
options head
  describe iis_website('${1:#:NAME}') do
    ${0}
  end

snippet iis_app_pool
options head
  describe iis_app_pool('${1:#:NAME}') do
    ${0}
  end

snippet interface
options head
  describe interface('${1:#:NAME}') do
    ${0}
  end

snippet ipfilter
options head
  describe ipfilter('${1:#:NAME}') do
    ${0}
  end

snippet ipnat
options head
  describe ipnat('${1:#:NAME}') do
    ${0}
  end

snippet iptables
options head
  describe iptables('${1:#:NAME}') do
    ${0}
  end

snippet ip6tables
options head
  describe ip6tables('${1:#:NAME}') do
    ${0}
  end

snippet kernel_module
options head
  describe kernel_module('${1:#:NAME}') do
    ${0}
  end

snippet linux_kernel_parameter
options head
  describe linux_kernel_parameter('${1:#:NAME}') do
    ${0}
  end

snippet lxc
options head
  describe lxc('${1:#:NAME}') do
    ${0}
  end

snippet mail_alias
options head
  describe mail_alias('${1:#:NAME}') do
    ${0}
  end

snippet mysql_config
options head
  describe mysql_config('${1:#:NAME}') do
    ${0}
  end

snippet package
options head
  describe package('${1:#:NAME}') do
    ${0}
  end

snippet php_config
options head
  describe php_config('${1:#:NAME}') do
    ${0}
  end

snippet port
options head
  describe port('${1:#:NAME}') do
    ${0}
  end

snippet ppa
options head
  describe ppa('${1:#:NAME}') do
    ${0}
  end

snippet process
options head
  describe process('${1:#:NAME}') do
    ${0}
  end

snippet routing_table
options head
  describe routing_table('${1:#:NAME}') do
    ${0}
  end

snippet selinux
options head
  describe selinux('${1:#:NAME}') do
    ${0}
  end

snippet selinux_module
options head
  describe selinux_module('${1:#:NAME}') do
    ${0}
  end

snippet service
options head
  describe service('${1:#:NAME}') do
    ${0}
  end

snippet user
options head
  describe user('${1:#:NAME}') do
    ${0}
  end

snippet yumrepo
options head
  describe yumrepo('${1:#:NAME}') do
    ${0}
  end

snippet windows_feature
options head
  describe windows_feature('${1:#:NAME}') do
    ${0}
  end

snippet windows_hot_fix
options head
  describe windows_hot_fix('${1:#:NAME}') do
    ${0}
  end

snippet windows_registry_key
options head
  describe windows_registry_key('${1:#:NAME}') do
    ${0}
  end

snippet windows_scheduled_task
options head
  describe windows_scheduled_task('${1:#:NAME}') do
    ${0}
  end

snippet zfs
options head
  describe zfs('${1:#:NAME}') do
    ${0}
  end

snippet docker_base
options head
  describe docker_base('${1:#:NAME}') do
    ${0}
  end

snippet docker_image
options head
  describe docker_image('${1:#:NAME}') do
    ${0}
  end

snippet docker_container
options head
  describe docker_container('${1:#:NAME}') do
    ${0}
  end

snippet x509_certificate
options head
  describe x509_certificate('${1:#:NAME}') do
    ${0}
  end

snippet x509_private_key
options head
  describe x509_private_key('${1:#:NAME}') do
    ${0}
  end

snippet linux_audit_system
options head
  describe linux_audit_system('${1:#:NAME}') do
    ${0}
  end


# Matcher snippets

# for bridge
snippet bridge_be
options head
  it { should be(${0:#:object}) }

snippet bridge_exist
options head
  it { should exist }

snippet bridge_be_has_interface
options head
  it { should be_has_interface(${0:#:interface}) }

# for bond
snippet bond_be
options head
  it { should be(${0:#:object}) }

snippet bond_exist
options head
  it { should exist }

snippet bond_be_has_interface
options head
  it { should be_has_interface(${0:#:interface}) }

# for cgroup
snippet cgroup_be
options head
  it { should be(${0:#:object}) }

snippet cgroup_subsystem
options head
  its(:subsystem) { should ${1:be} ${0} }

# for command
snippet command_be
options head
  it { should be(${0:#:object}) }

snippet command_stdout
options head
  its(:stdout) { should ${1:be} ${0} }

snippet command_stderr
options head
  its(:stderr) { should ${1:be} ${0} }

snippet command_exit_status
options head
  its(:exit_status) { should ${1:be} ${0} }

# for cron
snippet cron_be
options head
  it { should be(${0:#:object}) }

snippet cron_be_has_entry
options head
  it { should be_has_entry(${0:#:user}, ${1:#:entry}) }

snippet cron_table
options head
  its(:table) { should ${1:be} ${0} }

snippet cron_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for default_gateway
snippet default_gateway_be
options head
  it { should be(${0:#:object}) }

snippet default_gateway_ipaddress
options head
  its(:ipaddress) { should ${1:be} ${0} }

snippet default_gateway_interface
options head
  its(:interface) { should ${1:be} ${0} }

snippet default_gateway_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for file
snippet file_be
options head
  it { should be(${0:#:object}) }

snippet file_exist
options head
  it { should exist }

snippet file_be_file
options head
  it { should be_file }

snippet file_be_block_device
options head
  it { should be_block_device }

snippet file_be_character_device
options head
  it { should be_character_device }

snippet file_be_socket
options head
  it { should be_socket }

snippet file_be_directory
options head
  it { should be_directory }

snippet file_be_symlink
options head
  it { should be_symlink }

snippet file_be_pipe
options head
  it { should be_pipe }

snippet file_be_mode
options head
  it { should be_mode(${0:#:mode}) }

snippet file_be_owned_by
options head
  it { should be_owned_by(${0:#:owner}) }

snippet file_be_grouped_into
options head
  it { should be_grouped_into(${0:#:group}) }

snippet file_be_linked_to
options head
  it { should be_linked_to(${0:#:target}) }

snippet file_be_readable
options head
  it { should be_readable.by(${1}).by_user(${2}) }

snippet file_be_writable
options head
  it { should be_writable.by(${1}).by_user(${2}) }

snippet file_be_executable
options head
  it { should be_executable.by(${1}).by_user(${2}) }

snippet file_be_mounted
options head
  it { should be_mounted.with(${1}).only_with(${2}) }

snippet file_be_immutable
options head
  it { should be_immutable }

snippet file_be_version
options head
  it { should be_version(${0:#:version}) }

snippet file_content
options head
  its(:content) { should ${1:be} ${0} }

snippet file_md5sum
options head
  its(:md5sum) { should ${1:be} ${0} }

snippet file_sha256sum
options head
  its(:sha256sum) { should ${1:be} ${0} }

snippet file_mtime
options head
  its(:mtime) { should ${1:be} ${0} }

snippet file_size
options head
  its(:size) { should ${1:be} ${0} }

snippet file_selinux_label
options head
  its(:selinux_label) { should ${1:be} ${0} }

# for fstab
snippet fstab_be
options head
  it { should be(${0:#:object}) }

snippet fstab_be_has_entry
options head
  it { should be_has_entry(${0:#:entry}) }

snippet fstab_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for group
snippet group_be
options head
  it { should be(${0:#:object}) }

snippet group_exist
options head
  it { should exist }

snippet group_be_has_gid
options head
  it { should be_has_gid(${0:#:gid}) }

# for host
snippet host_be
options head
  it { should be(${0:#:object}) }

snippet host_be_resolvable
options head
  it { should be_resolvable.by(${1}) }

snippet host_be_reachable
options head
  it { should be_reachable.with(${1}) }

snippet host_ipaddress
options head
  its(:ipaddress) { should ${1:be} ${0} }

snippet host_ipv4_address
options head
  its(:ipv4_address) { should ${1:be} ${0} }

snippet host_ipv6_address
options head
  its(:ipv6_address) { should ${1:be} ${0} }

# for iis_website
snippet iis_website_be
options head
  it { should be(${0:#:object}) }

snippet iis_website_exist
options head
  it { should exist }

snippet iis_website_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

snippet iis_website_be_running
options head
  it { should be_running.under(${1}) }

snippet iis_website_be_in_app_pool
options head
  it { should be_in_app_pool(${0:#:app_pool}) }

snippet iis_website_be_has_physical_path
options head
  it { should be_has_physical_path(${0:#:path}) }

snippet iis_website_be_has_site_bindings
options head
  it { should be_has_site_bindings(${0:#:port}, ${1:#:protocol}, ${2:#:ipaddress}, ${3:#:host_header}) }

snippet iis_website_be_has_virtual_dir
options head
  it { should be_has_virtual_dir(${0:#:vdir}, ${1:#:path}) }

snippet iis_website_be_has_site_application
options head
  it { should be_has_site_application(${0:#:app}, ${1:#:pool}, ${2:#:physical_path}) }

snippet iis_website_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for iis_app_pool
snippet iis_app_pool_be
options head
  it { should be(${0:#:object}) }

snippet iis_app_pool_exist
options head
  it { should exist }

snippet iis_app_pool_be_has_dotnet_version
options head
  it { should be_has_dotnet_version(${0:#:dotnet}) }

snippet iis_app_pool_be_has_32bit_enabled
options head
  it { should be_has_32bit_enabled }

snippet iis_app_pool_be_has_idle_timeout
options head
  it { should be_has_idle_timeout(${0:#:minutes}) }

snippet iis_app_pool_be_has_identity_type
options head
  it { should be_has_identity_type(${0:#:identity_type}) }

snippet iis_app_pool_be_has_periodic_restart
options head
  it { should be_has_periodic_restart(${0:#:minutes}) }

snippet iis_app_pool_be_has_user_profile_enabled
options head
  it { should be_has_user_profile_enabled }

snippet iis_app_pool_be_has_username
options head
  it { should be_has_username(${0:#:username}) }

snippet iis_app_pool_be_has_managed_pipeline_mode
options head
  it { should be_has_managed_pipeline_mode(${0:#:mode}) }

snippet iis_app_pool_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for interface
snippet interface_be
options head
  it { should be(${0:#:object}) }

snippet interface_exist
options head
  it { should exist }

snippet interface_be_has_ipv4_address
options head
  it { should be_has_ipv4_address(${0:#:ip_address}) }

snippet interface_be_has_ipv6_address
options head
  it { should be_has_ipv6_address(${0:#:ip_address}) }

snippet interface_be_up
options head
  it { should be_up }

snippet interface_speed
options head
  its(:speed) { should ${1:be} ${0} }

# for ipfilter
snippet ipfilter_be
options head
  it { should be(${0:#:object}) }

snippet ipfilter_be_has_rule
options head
  it { should be_has_rule(${0:#:rule}) }

snippet ipfilter_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for ipnat
snippet ipnat_be
options head
  it { should be(${0:#:object}) }

snippet ipnat_be_has_rule
options head
  it { should be_has_rule(${0:#:rule}) }

snippet ipnat_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for iptables
snippet iptables_be
options head
  it { should be(${0:#:object}) }

snippet iptables_be_has_rule
options head
  it { should be_has_rule(${0:#:rule}, ${1:#:table}, ${2:#:chain}) }

snippet iptables_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for ip6tables
snippet ip6tables_be
options head
  it { should be(${0:#:object}) }

snippet ip6tables_be_has_rule
options head
  it { should be_has_rule(${0:#:rule}, ${1:#:table}, ${2:#:chain}) }

snippet ip6tables_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for kernel_module
snippet kernel_module_be
options head
  it { should be(${0:#:object}) }

snippet kernel_module_be_loaded
options head
  it { should be_loaded }

# for linux_kernel_parameter
snippet linux_kernel_parameter_be
options head
  it { should be(${0:#:object}) }

snippet linux_kernel_parameter_value
options head
  its(:value) { should ${1:be} ${0} }

# for lxc
snippet lxc_be
options head
  it { should be(${0:#:object}) }

snippet lxc_exist
options head
  it { should exist }

snippet lxc_be_running
options head
  it { should be_running.under(${1}) }

snippet lxc_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for mail_alias
snippet mail_alias_be
options head
  it { should be(${0:#:object}) }

snippet mail_alias_be_aliased_to
options head
  it { should be_aliased_to(${0:#:target}) }

# for mysql_config
snippet mysql_config_be
options head
  it { should be(${0:#:object}) }

snippet mysql_config_value
options head
  its(:value) { should ${1:be} ${0} }

# for package
snippet package_be
options head
  it { should be(${0:#:object}) }

snippet package_be_installed
options head
  it { should be_installed.by(${1}).with_version(${2}) }

snippet package_version
options head
  its(:version) { should ${1:be} ${0} }

# for php_config
snippet php_config_be
options head
  it { should be(${0:#:object}) }

snippet php_config_value
options head
  its(:value) { should ${1:be} ${0} }

# for port
snippet port_be
options head
  it { should be(${0:#:object}) }

snippet port_be_listening
options head
  it { should be_listening.with(${1}).on(${2}) }

snippet port_be_valid_ip_address
options head
  it { should be_valid_ip_address(${0:#:ip_address}) }

snippet port_protocols
options head
  its(:protocols) { should ${1:be} ${0} }

snippet port_options
options head
  its(:options) { should ${1:be} ${0} }

# for ppa
snippet ppa_be
options head
  it { should be(${0:#:object}) }

snippet ppa_exist
options head
  it { should exist }

snippet ppa_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

# for process
snippet process_be
options head
  it { should be(${0:#:object}) }

snippet process_be_running
options head
  it { should be_running.under(${1}) }

snippet process_user
options head
  its(:user) { should ${1:be} ${0} }

snippet process_group
options head
  its(:group) { should ${1:be} ${0} }

snippet process_count
options head
  its(:count) { should ${1:be} ${0} }

# for routing_table
snippet routing_table_be
options head
  it { should be(${0:#:object}) }

snippet routing_table_be_has_entry
options head
  it { should be_has_entry(${0:#:entry}) }

snippet routing_table_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for selinux
snippet selinux_be
options head
  it { should be(${0:#:object}) }

snippet selinux_be_disabled
options head
  it { should be_disabled }

snippet selinux_be_enforcing
options head
  it { should be_enforcing.with_policy(${1}) }

snippet selinux_be_permissive
options head
  it { should be_permissive.with_policy(${1}) }

snippet selinux_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

# for selinux_module
snippet selinux_module_be
options head
  it { should be(${0:#:object}) }

snippet selinux_module_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

snippet selinux_module_be_installed
options head
  it { should be_installed.by(${1}).with_version(${2}) }

# for service
snippet service_be
options head
  it { should be(${0:#:object}) }

snippet service_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

snippet service_be_installed
options head
  it { should be_installed.by(${1}).with_version(${2}) }

snippet service_be_has_start_mode
options head
  it { should be_has_start_mode(${0:#:mode}) }

snippet service_be_running
options head
  it { should be_running.under(${1}) }

snippet service_be_monitored_by
options head
  it { should be_monitored_by(${0:#:monitor}) }

snippet service_be_has_property
options head
  it { should be_has_property(${0:#:property}) }

snippet service_property
options head
  its(:property) { should ${1:be} ${0} }

# for user
snippet user_be
options head
  it { should be(${0:#:object}) }

snippet user_exist
options head
  it { should exist }

snippet user_be_belongs_to_group
options head
  it { should be_belongs_to_group(${0:#:group}) }

snippet user_be_belongs_to_primary_group
options head
  it { should be_belongs_to_primary_group(${0:#:group}) }

snippet user_be_has_uid
options head
  it { should be_has_uid(${0:#:uid}) }

snippet user_be_has_home_directory
options head
  it { should be_has_home_directory(${0:#:path}) }

snippet user_be_has_login_shell
options head
  it { should be_has_login_shell(${0:#:shell}) }

snippet user_be_has_authorized_key
options head
  it { should be_has_authorized_key(${0:#:key}) }

snippet user_minimum_days_between_password_change
options head
  its(:minimum_days_between_password_change) { should ${1:be} ${0} }

snippet user_maximum_days_between_password_change
options head
  its(:maximum_days_between_password_change) { should ${1:be} ${0} }

snippet user_encrypted_password
options head
  its(:encrypted_password) { should ${1:be} ${0} }

# for yumrepo
snippet yumrepo_be
options head
  it { should be(${0:#:object}) }

snippet yumrepo_exist
options head
  it { should exist }

snippet yumrepo_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

# for windows_feature
snippet windows_feature_be
options head
  it { should be(${0:#:object}) }

snippet windows_feature_be_installed
options head
  it { should be_installed.by(${1}).with_version(${2}) }

# for windows_hot_fix
snippet windows_hot_fix_be
options head
  it { should be(${0:#:object}) }

snippet windows_hot_fix_be_installed
options head
  it { should be_installed.by(${1}).with_version(${2}) }

# for windows_registry_key
snippet windows_registry_key_be
options head
  it { should be(${0:#:object}) }

snippet windows_registry_key_exist
options head
  it { should exist }

snippet windows_registry_key_be_has_property
options head
  it { should be_has_property(${0:#:property_name}, ${1:#:property_type}) }

snippet windows_registry_key_be_has_value
options head
  it { should be_has_value(${0:#:value}) }

snippet windows_registry_key_be_has_property_value
options head
  it { should be_has_property_value(${0:#:property_name}, ${1:#:property_type}, ${2:#:value}) }

# for windows_scheduled_task
snippet windows_scheduled_task_be
options head
  it { should be(${0:#:object}) }

snippet windows_scheduled_task_exist
options head
  it { should exist }

# for zfs
snippet zfs_be
options head
  it { should be(${0:#:object}) }

snippet zfs_exist
options head
  it { should exist }

snippet zfs_be_has_property
options head
  it { should be_has_property(${0:#:property}) }

snippet zfs_to_s
options head
  its(:to_s) { should ${1:be} ${0} }

snippet zfs_property
options head
  its(:property) { should ${1:be} ${0} }

# for docker_base
snippet docker_base_be
options head
  it { should be(${0:#:object}) }

snippet docker_base_be_exist
options head
  it { should be_exist }

snippet docker_base_inspection
options head
  its(:inspection) { should ${1:be} ${0} }

# for docker_image
snippet docker_image_be
options head
  it { should be(${0:#:object}) }

# for docker_container
snippet docker_container_be
options head
  it { should be(${0:#:object}) }

snippet docker_container_be_running
options head
  it { should be_running.under(${1}) }

snippet docker_container_be_has_volume
options head
  it { should be_has_volume(${0:#:container_path}, ${1:#:host_path}) }

# for x509_certificate
snippet x509_certificate_be
options head
  it { should be(${0:#:object}) }

snippet x509_certificate_be_certificate
options head
  it { should be_certificate }

snippet x509_certificate_be_has_purpose
options head
  it { should be_has_purpose(${0:#:p}) }

snippet x509_certificate_be_valid
options head
  it { should be_valid }

snippet x509_certificate_subject
options head
  its(:subject) { should ${1:be} ${0} }

snippet x509_certificate_issuer
options head
  its(:issuer) { should ${1:be} ${0} }

snippet x509_certificate_email
options head
  its(:email) { should ${1:be} ${0} }

snippet x509_certificate_fingerprint
options head
  its(:fingerprint) { should ${1:be} ${0} }

snippet x509_certificate_alias
options head
  its(:alias) { should ${1:be} ${0} }

snippet x509_certificate_keylength
options head
  its(:keylength) { should ${1:be} ${0} }

snippet x509_certificate_validity_in_days
options head
  its(:validity_in_days) { should ${1:be} ${0} }

# for x509_private_key
snippet x509_private_key_be
options head
  it { should be(${0:#:object}) }

snippet x509_private_key_be_valid
options head
  it { should be_valid }

snippet x509_private_key_be_encrypted
options head
  it { should be_encrypted }

snippet x509_private_key_be_has_matching_certificate
options head
  it { should be_has_matching_certificate(${0:#:cert_file}) }

# for linux_audit_system
snippet linux_audit_system_be
options head
  it { should be(${0:#:object}) }

snippet linux_audit_system_be_enabled
options head
  it { should be_enabled.with_level(${1}) }

snippet linux_audit_system_be_running
options head
  it { should be_running.under(${1}) }

snippet linux_audit_system_rules
options head
  its(:rules) { should ${1:be} ${0} }

